--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: differ
- !ruby/object:RI::MethodSummary 
  name: fail_with
comment: 
- !ruby/struct:SM::Flow::P 
  body: "RSpec::Expectations adds two instance methods to every object:"
- !ruby/struct:SM::Flow::VERB 
  body: "    should(matcher=nil)\n    should_not(matcher=nil)\n"
- !ruby/struct:SM::Flow::P 
  body: "Both methods take an optional matcher object (See [RSpec::Matchers](../RSpec/Matchers)). When `should` is invoked with a matcher, it turns around and calls `matcher.matches?(self)`. For example, in the expression:"
- !ruby/struct:SM::Flow::VERB 
  body: "    order.total.should eq(Money.new(5.55, :USD))\n"
- !ruby/struct:SM::Flow::P 
  body: the `should` method invokes the equivalent of `eq.matches?(order.total)`. If `matches?` returns true, the expectation is met and execution continues. If `false`, then the spec fails with the message returned by `eq.failure_message_for_should`.
- !ruby/struct:SM::Flow::P 
  body: "Given the expression:"
- !ruby/struct:SM::Flow::VERB 
  body: "    order.entries.should_not include(entry)\n"
- !ruby/struct:SM::Flow::P 
  body: the `should_not` method invokes the equivalent of `include.matches?(order.entries)`, but it interprets `false` as success, and `true` as a failure, using the message generated by `eq.failure_message_for_should_not`.
- !ruby/struct:SM::Flow::P 
  body: rspec-expectations ships with a standard set of useful matchers, and writing your own matchers is quite simple.
- !ruby/struct:SM::Flow::P 
  body: See [RSpec::Matchers](../RSpec/Matchers) for more information about the built-in matchers that ship with rspec-expectations, and how to write your own custom matchers.
constants: []

full_name: RSpec::Expectations
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: differ=
name: Expectations
superclass: 
