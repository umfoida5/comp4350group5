--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Applied to a proc, specifies that its execution will cause some value to change.
- !ruby/struct:SM::Flow::P 
  body: "@param [Object] receiver @param [Symbol] message the message to send the receiver"
- !ruby/struct:SM::Flow::P 
  body: You can either pass <tt>receiver</tt> and <tt>message</tt>, or a block, but not both.
- !ruby/struct:SM::Flow::P 
  body: When passing a block, it must use the <tt>{ ... }</tt> format, not do/end, as <tt>{ ... }</tt> binds to the <tt>change</tt> method, whereas do/end would errantly bind to the <tt>should</tt> or <tt>should_not</tt> method.
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  lambda {\n    team.add_player(player)\n  }.should change(roster, :count)\n\n  lambda {\n    team.add_player(player)\n  }.should change(roster, :count).by(1)\n\n  lambda {\n    team.add_player(player)\n  }.should change(roster, :count).by_at_least(1)\n\n  lambda {\n    team.add_player(player)\n  }.should change(roster, :count).by_at_most(1)\n\n  string = &quot;string&quot;\n  lambda {\n    string.reverse!\n  }.should change { string }.from(&quot;string&quot;).to(&quot;gnirts&quot;)\n\n  lambda {\n    person.happy_birthday\n  }.should change(person, :birthday).from(32).to(33)\n\n  lambda {\n    employee.develop_great_new_social_networking_app\n  }.should change(employee, :title).from(&quot;Mail Clerk&quot;).to(&quot;CEO&quot;)\n\n  lambda {\n    doctor.leave_office\n  }.should change(doctor, :sign).from(/is in/).to(/is out/)\n\n  user = User.new(:type =&gt; &quot;admin&quot;)\n  lambda {\n    user.symbolize_type\n  }.should change(user, :type).from(String).to(Symbol)\n"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Notes
- !ruby/struct:SM::Flow::P 
  body: Evaluates <tt>receiver.message</tt> or <tt>block</tt> before and after it evaluates the proc object (generated by the lambdas in the examples above).
- !ruby/struct:SM::Flow::P 
  body: <tt>should_not change</tt> only supports the form with no subsequent calls to <tt>by</tt>, <tt>by_at_least</tt>, <tt>by_at_most</tt>, <tt>to</tt> or <tt>from</tt>.
full_name: RSpec::Matchers#change
is_singleton: false
name: change
params: (receiver=nil, message=nil, &block)
visibility: public
