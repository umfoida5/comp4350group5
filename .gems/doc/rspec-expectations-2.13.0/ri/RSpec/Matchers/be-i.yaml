--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  actual.should be_true\n  actual.should be_false\n  actual.should be_nil\n  actual.should be_[arbitrary_predicate](*args)\n  actual.should_not be_nil\n  actual.should_not be_[arbitrary_predicate](*args)\n"
- !ruby/struct:SM::Flow::P 
  body: Given true, false, or nil, will pass if actual value is true, false or nil (respectively). Given no args means the caller should satisfy an if condition (to be or not to be).
- !ruby/struct:SM::Flow::P 
  body: Predicates are any Ruby method that ends in a &quot;?&quot; and returns true or false. Given be_ followed by arbitrary_predicate (without the &quot;?&quot;), RSpec will match convert that into a query against the target object.
- !ruby/struct:SM::Flow::P 
  body: The arbitrary_predicate feature will handle any predicate prefixed with &quot;be_an_&quot; (e.g. be_an_instance_of), &quot;be_a_&quot; (e.g. be_a_kind_of) or &quot;be_&quot; (e.g. be_empty), letting you choose the prefix that best suits the predicate.
full_name: RSpec::Matchers#be
is_singleton: false
name: be
params: (*args)
visibility: public
