--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "@private"
  name: expected_args
  rw: R
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Wrapper for matching arguments against a list of expected values. Used by the `with` method on a `MessageExpectation`:"
- !ruby/struct:SM::Flow::VERB 
  body: "    object.should_receive(:message).with(:a, 'b', 3)\n    object.message(:a, 'b', 3)\n"
- !ruby/struct:SM::Flow::P 
  body: Values passed to `with` can be literal values or argument matchers that match against the real objects .e.g.
- !ruby/struct:SM::Flow::VERB 
  body: "    object.should_receive(:message).with(hash_including(:a =&gt; 'b'))\n"
- !ruby/struct:SM::Flow::P 
  body: Can also be used directly to match the contents of any `Array`. This enables 3rd party mocking libs to take advantage of rspec's argument matching without using the rest of rspec-mocks.
- !ruby/struct:SM::Flow::VERB 
  body: "    require 'rspec/mocks/argument_list_matcher'\n    include RSpec::Mocks::ArgumentMatchers\n\n    arg_list_matcher = RSpec::Mocks::ArgumentListMatcher.new(123, hash_including(:a =&gt; 'b'))\n    arg_list_matcher.args_match?(123, :a =&gt; 'b')\n"
- !ruby/struct:SM::Flow::P 
  body: "@see ArgumentMatchers"
constants: []

full_name: RSpec::Mocks::ArgumentListMatcher
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: args_match?
name: ArgumentListMatcher
superclass: Object
