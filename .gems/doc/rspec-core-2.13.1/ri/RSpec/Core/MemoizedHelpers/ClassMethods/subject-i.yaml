--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Declares a `subject` for an example group which can then be the implicit receiver (through delegation) of calls to `should`.
- !ruby/struct:SM::Flow::P 
  body: Given a `name`, defines a method with that name which returns the `subject`. This lets you declare the subject once and access it implicitly in one-liners and explicitly using an intention revealing name.
- !ruby/struct:SM::Flow::P 
  body: "@param [String,Symbol] name used to define an accessor with an"
- !ruby/struct:SM::Flow::VERB 
  body: "  intention revealing name\n"
- !ruby/struct:SM::Flow::P 
  body: "@param block defines the value to be returned by `subject` in examples"
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  describe CheckingAccount, &quot;with $50&quot; do\n    subject { CheckingAccount.new(Money.new(50, :USD)) }\n    it { should have_a_balance_of(Money.new(50, :USD)) }\n    it { should_not be_overdrawn }\n  end\n\n  describe CheckingAccount, &quot;with a non-zero starting balance&quot; do\n    subject(:account) { CheckingAccount.new(Money.new(50, :USD)) }\n    it { should_not be_overdrawn }\n    it &quot;has a balance equal to the starting balance&quot; do\n      account.balance.should eq(Money.new(50, :USD))\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "@see MemoizedHelpers#should"
full_name: RSpec::Core::MemoizedHelpers::ClassMethods#subject
is_singleton: false
name: subject
params: (name=nil, &block)
visibility: public
