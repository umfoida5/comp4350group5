--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Just like `subject`, except the block is invoked by an implicit `before` hook. This serves a dual purpose of setting up state and providing a memoized reference to that state.
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Thing\n    def self.count\n      @count ||= 0\n    end\n\n    def self.count=(val)\n      @count += val\n    end\n\n    def self.reset_count\n      @count = 0\n    end\n\n    def initialize\n      self.class.count += 1\n    end\n  end\n\n  describe Thing do\n    after(:each) { Thing.reset_count }\n\n    context &quot;using subject&quot; do\n      subject { Thing.new }\n\n      it &quot;is not invoked implicitly&quot; do\n        Thing.count.should eq(0)\n      end\n\n      it &quot;can be invoked explicitly&quot; do\n        subject\n        Thing.count.should eq(1)\n      end\n    end\n\n    context &quot;using subject!&quot; do\n      subject!(:thing) { Thing.new }\n\n      it &quot;is invoked implicitly&quot; do\n        Thing.count.should eq(1)\n      end\n\n      it &quot;returns memoized version on first invocation&quot; do\n        subject\n        Thing.count.should eq(1)\n      end\n    end\n  end\n"
full_name: RSpec::Core::MemoizedHelpers::ClassMethods#subject!
is_singleton: false
name: subject!
params: (name=nil, &block)
visibility: public
