--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: ": nil"
comment: 
- !ruby/struct:SM::Flow::P 
  body: "@overload pending() @overload pending(message) @overload pending(message, &amp;block)"
- !ruby/struct:SM::Flow::P 
  body: Stops execution of an example, and reports it as pending. Takes an optional message and block.
- !ruby/struct:SM::Flow::P 
  body: "@param [String] message optional message to add to the summary report. @param [Block] block optional block. If it fails, the example is"
- !ruby/struct:SM::Flow::VERB 
  body: "  reported as pending. If it executes cleanly the example fails.\n"
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "    describe &quot;an example&quot; do\n      # reported as &quot;Pending: no reason given&quot;\n      it &quot;is pending with no message&quot; do\n        pending\n        this_does_not_get_executed\n      end\n\n      # reported as &quot;Pending: something else getting finished&quot;\n      it &quot;is pending with a custom message&quot; do\n        pending(&quot;something else getting finished&quot;)\n        this_does_not_get_executed\n      end\n\n      # reported as &quot;Pending: something else getting finished&quot;\n      it &quot;is pending with a failing block&quot; do\n        pending(&quot;something else getting finished&quot;) do\n          raise &quot;this is the failure&quot;\n        end\n      end\n\n      # reported as failure, saying we expected the block to fail but\n      # it passed.\n      it &quot;is pending with a passing block&quot; do\n        pending(&quot;something else getting finished&quot;) do\n          true.should be(true)\n        end\n      end\n    end\n"
- !ruby/struct:SM::Flow::P 
  body: "@note `before(:each)` hooks are eval'd when you use the `pending`"
- !ruby/struct:SM::Flow::VERB 
  body: "  method within an example. If you want to declare an example `pending`\n  and bypass the `before` hooks as well, you can pass `:pending =&gt; true`\n  to the `it` method:\n\n      it &quot;does something&quot;, :pending =&gt; true do\n        # ...\n      end\n\n  or pass `:pending =&gt; &quot;something else getting finished&quot;` to add a\n  message to the summary report:\n\n      it &quot;does something&quot;, :pending =&gt; &quot;something else getting finished&quot; do\n        # ...\n      end\n"
full_name: RSpec::Core::Pending#pending
is_singleton: false
name: pending
params: "(*args) {|: nil| ...}"
visibility: public
