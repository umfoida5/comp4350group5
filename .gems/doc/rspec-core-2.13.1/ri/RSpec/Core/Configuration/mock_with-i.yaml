--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: framework_module.configuration
comment: 
- !ruby/struct:SM::Flow::P 
  body: Sets the mock framework adapter module.
- !ruby/struct:SM::Flow::P 
  body: `framework` can be a Symbol or a Module.
- !ruby/struct:SM::Flow::P 
  body: Given any of `:rspec`, `:mocha`, `:flexmock`, or `:rr`, configures the named framework.
- !ruby/struct:SM::Flow::P 
  body: Given `:nothing`, configures no framework. Use this if you don't use any mocking framework to save a little bit of overhead.
- !ruby/struct:SM::Flow::P 
  body: "Given a Module, includes that module in every example group. The module should adhere to RSpec's mock framework adapter API:"
- !ruby/struct:SM::Flow::VERB 
  body: "    setup_mocks_for_rspec\n      - called before each example\n\n    verify_mocks_for_rspec\n      - called after each example. Framework should raise an exception\n        when expectations fail\n\n    teardown_mocks_for_rspec\n      - called after verify_mocks_for_rspec (even if there are errors)\n"
- !ruby/struct:SM::Flow::P 
  body: If the module responds to `configuration` and `mock_with` receives a block, it will yield the configuration object to the block e.g.
- !ruby/struct:SM::Flow::VERB 
  body: "    config.mock_with OtherMockFrameworkAdapter do |mod_config|\n      mod_config.custom_setting = true\n    end\n"
full_name: RSpec::Core::Configuration#mock_with
is_singleton: false
name: mock_with
params: (framework) {|framework_module.configuration| ...}
visibility: public
