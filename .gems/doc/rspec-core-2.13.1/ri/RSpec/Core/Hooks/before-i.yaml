--- !ruby/object:RI::MethodDescription 
aliases: 
- !ruby/object:RI::AliasName 
  name: append_before
block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: "@api public @overload before(&amp;block) @overload before(scope, &amp;block) @overload before(scope, conditions, &amp;block) @overload before(conditions, &amp;block)"
- !ruby/struct:SM::Flow::P 
  body: "@param [Symbol] scope `:each`, `:all`, or `:suite` (defaults to `:each`) @param [Hash] conditions"
- !ruby/struct:SM::Flow::VERB 
  body: "  constrains this hook to examples matching these conditions e.g.\n  `before(:each, :ui =&gt; true) { ... }` will only run with examples or\n  groups declared with `:ui =&gt; true`.\n"
- !ruby/struct:SM::Flow::P 
  body: "@see #after @see #around @see ExampleGroup @see SharedContext @see SharedExampleGroup @see Configuration"
- !ruby/struct:SM::Flow::P 
  body: Declare a block of code to be run before each example (using `:each`) or once before any example (using `:all`). These are usually declared directly in the {ExampleGroup} to which they apply, but they can also be shared across multiple groups.
- !ruby/struct:SM::Flow::P 
  body: You can also use `before(:suite)` to run a block of code before any example groups are run. This should be declared in {RSpec.configure}
- !ruby/struct:SM::Flow::P 
  body: Instance variables declared in `before(:each)` or `before(:all)` are accessible within each example.
- !ruby/struct:SM::Flow::P 
  body: "### Order"
- !ruby/struct:SM::Flow::P 
  body: "`before` hooks are stored in three scopes, which are run in order: `:suite`, `:all`, and `:each`. They can also be declared in several different places: `RSpec.configure`, a parent group, the current group. They are run in the following order:"
- !ruby/struct:SM::Flow::VERB 
  body: "    before(:suite) # declared in RSpec.configure\n    before(:all)   # declared in RSpec.configure\n    before(:all)   # declared in a parent group\n    before(:all)   # declared in the current group\n    before(:each)  # declared in RSpec.configure\n    before(:each)  # declared in a parent group\n    before(:each)  # declared in the current group\n"
- !ruby/struct:SM::Flow::P 
  body: If more than one `before` is declared within any one scope, they are run in the order in which they are declared.
- !ruby/struct:SM::Flow::P 
  body: "### Conditions"
- !ruby/struct:SM::Flow::P 
  body: When you add a conditions hash to `before(:each)` or `before(:all)`, RSpec will only apply that hook to groups or examples that match the conditions. e.g.
- !ruby/struct:SM::Flow::VERB 
  body: "    RSpec.configure do |config|\n      config.before(:each, :authorized =&gt; true) do\n        log_in_as :authorized_user\n      end\n    end\n\n    describe Something, :authorized =&gt; true do\n      # the before hook will run in before each example in this group\n    end\n\n    describe SomethingElse do\n      it &quot;does something&quot;, :authorized =&gt; true do\n        # the before hook will run before this example\n      end\n\n      it &quot;does something else&quot; do\n        # the hook will not run before this example\n      end\n    end\n"
- !ruby/struct:SM::Flow::P 
  body: "### Warning: `before(:suite, :with =&gt; :conditions)`"
- !ruby/struct:SM::Flow::P 
  body: The conditions hash is used to match against specific examples. Since `before(:suite)` is not run in relation to any specific example or group, conditions passed along with `:suite` are effectively ignored.
- !ruby/struct:SM::Flow::P 
  body: "### Exceptions"
- !ruby/struct:SM::Flow::P 
  body: When an exception is raised in a `before` block, RSpec skips any subsequent `before` blocks and the example, but runs all of the `after(:each)` and `after(:all)` hooks.
- !ruby/struct:SM::Flow::P 
  body: "### Warning: implicit before blocks"
- !ruby/struct:SM::Flow::P 
  body: `before` hooks can also be declared in shared contexts which get included implicitly either by you or by extension libraries. Since RSpec runs these in the order in which they are declared within each scope, load order matters, and can lead to confusing results when one before block depends on state that is prepared in another before block that gets run later.
- !ruby/struct:SM::Flow::P 
  body: "### Warning: `before(:all)`"
- !ruby/struct:SM::Flow::P 
  body: It is very tempting to use `before(:all)` to speed things up, but we recommend that you avoid this as there are a number of gotchas, as well as things that simply don't work.
- !ruby/struct:SM::Flow::P 
  body: "#### context"
- !ruby/struct:SM::Flow::P 
  body: `before(:all)` is run in an example that is generated to provide group context for the block.
- !ruby/struct:SM::Flow::P 
  body: "#### instance variables"
- !ruby/struct:SM::Flow::P 
  body: Instance variables declared in `before(:all)` are shared across all the examples in the group. This means that each example can change the state of a shared object, resulting in an ordering dependency that can make it difficult to reason about failures.
- !ruby/struct:SM::Flow::P 
  body: "### other frameworks"
- !ruby/struct:SM::Flow::P 
  body: Mock object frameworks and database transaction managers (like ActiveRecord) are typically designed around the idea of setting up before an example, running that one example, and then tearing down. This means that mocks and stubs can (sometimes) be declared in `before(:all)`, but get torn down before the first real example is ever run.
- !ruby/struct:SM::Flow::P 
  body: You <em>can</em> create database-backed model objects in a `before(:all)` in rspec-rails, but it will not be wrapped in a transaction for you, so you are on your own to clean up in an `after(:all)` block.
- !ruby/struct:SM::Flow::P 
  body: "@example before(:each) declared in an {ExampleGroup}"
- !ruby/struct:SM::Flow::VERB 
  body: "    describe Thing do\n      before(:each) do\n        @thing = Thing.new\n      end\n\n      it &quot;does something&quot; do\n        # here you can access @thing\n      end\n    end\n"
- !ruby/struct:SM::Flow::P 
  body: "@example before(:all) declared in an {ExampleGroup}"
- !ruby/struct:SM::Flow::VERB 
  body: "    describe Parser do\n      before(:all) do\n        File.open(file_to_parse, 'w') do |f|\n          f.write &lt;&lt;-CONTENT\n            stuff in the file\n          CONTENT\n        end\n      end\n\n      it &quot;parses the file&quot; do\n        Parser.parse(file_to_parse)\n      end\n\n      after(:all) do\n        File.delete(file_to_parse)\n      end\n    end\n"
full_name: RSpec::Core::Hooks#before
is_singleton: false
name: before
params: (*args, &block)
visibility: public
