--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: "@api public @overload around(&amp;block) @overload around(scope, &amp;block) @overload around(scope, conditions, &amp;block) @overload around(conditions, &amp;block)"
- !ruby/struct:SM::Flow::P 
  body: "@param [Symbol] scope `:each` (defaults to `:each`)"
- !ruby/struct:SM::Flow::VERB 
  body: "  present for syntax parity with `before` and `after`, but `:each` is\n  the only supported value.\n"
- !ruby/struct:SM::Flow::P 
  body: "@param [Hash] conditions"
- !ruby/struct:SM::Flow::VERB 
  body: "  constrains this hook to examples matching these conditions e.g.\n  `around(:each, :ui =&gt; true) { ... }` will only run with examples or\n  groups declared with `:ui =&gt; true`.\n"
- !ruby/struct:SM::Flow::P 
  body: "@yield [Example] the example to run"
- !ruby/struct:SM::Flow::P 
  body: "@note the syntax of `around` is similar to that of `before` and `after`"
- !ruby/struct:SM::Flow::VERB 
  body: "  but the semantics are quite different. `before` and `after` hooks are\n  run in the context of of the examples with which they are associated,\n  whereas `around` hooks are actually responsible for running the\n  examples. Consequently, `around` hooks do not have direct access to\n  resources that are made available within the examples and their\n  associated `before` and `after` hooks.\n"
- !ruby/struct:SM::Flow::P 
  body: "@note `:each` is the only supported scope."
- !ruby/struct:SM::Flow::P 
  body: "Declare a block of code, parts of which will be run before and parts after the example. It is your responsibility to run the example:"
- !ruby/struct:SM::Flow::VERB 
  body: "    around(:each) do |ex|\n      # do some stuff before\n      ex.run\n      # do some stuff after\n    end\n"
- !ruby/struct:SM::Flow::P 
  body: The yielded example aliases `run` with `call`, which lets you treat it like a `Proc`. This is especially handy when working with libaries that manage their own setup and teardown using a block or proc syntax, e.g.
- !ruby/struct:SM::Flow::VERB 
  body: "    around(:each) {|ex| Database.transaction(&amp;ex)}\n    around(:each) {|ex| FakeFS(&amp;ex)}\n"
full_name: RSpec::Core::Hooks#around
is_singleton: false
name: around
params: (*args, &block)
visibility: public
