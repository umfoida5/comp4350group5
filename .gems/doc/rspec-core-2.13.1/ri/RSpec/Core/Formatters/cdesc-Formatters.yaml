--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: "## Built-in Formatters"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: progress (default) - prints dots for passing examples, `F` for failures, `*` for pending
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: documentation - prints the docstrings passed to `describe` and `it` methods (and their aliases)
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: html
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: textmate - html plus links to editor
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: json - useful for archiving data for subsequent analysis
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: The progress formatter is the default, but you can choose any one or more of the other formatters by passing with the `--format` (or `-f` for short) command-line option, e.g.
- !ruby/struct:SM::Flow::VERB 
  body: "    rspec --format documentation\n"
- !ruby/struct:SM::Flow::P 
  body: You can also send the output of multiple formatters to different streams, e.g.
- !ruby/struct:SM::Flow::VERB 
  body: "    rspec --format documentation --format html --out results.html\n"
- !ruby/struct:SM::Flow::P 
  body: This example sends the output of the documentation formatter to `STDOUT`, and the output of the html formatter to results.html.
- !ruby/struct:SM::Flow::P 
  body: "## Custom Formatters"
- !ruby/struct:SM::Flow::P 
  body: "You can tell RSpec to use a custom formatter by passing its path and name to the `rspec` commmand. For example, if you define MyCustomFormatter in path/to/my_custom_formatter.rb, you would type this command:"
- !ruby/struct:SM::Flow::VERB 
  body: "    rspec --require path/to/my_custom_formatter.rb --format MyCustomFormatter\n"
- !ruby/struct:SM::Flow::P 
  body: "The reporter calls every formatter with this protocol:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: `start(expected_example_count)`
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: zero or more of the following
  - !ruby/object:SM::Flow::LIST 
    contents: 
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: `example_group_started(group)`
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: `example_started(example)`
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: `example_passed(example)`
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: `example_failed(example)`
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: `example_pending(example)`
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: `message(string)`
    type: :BULLET
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: `stop`
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: `start_dump`
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: `dump_pending`
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: `dump_failures`
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: `dump_summary(duration, example_count, failure_count, pending_count)`
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: `seed(value)`
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: `close`
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: You can either implement all of those methods or subclass `RSpec::Core::Formatters::BaseTextFormatter` and override the methods you want to enhance.
- !ruby/struct:SM::Flow::P 
  body: "@see RSpec::Core::Formatters::BaseTextFormatter @see RSpec::Core::Reporter"
constants: []

full_name: RSpec::Core::Formatters
includes: []

instance_methods: []

name: Formatters
superclass: 
