--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: "Defines aliases for ANSI coloured output. Default colours can be overridden by defining a <tt>GHERKIN_COLORS</tt> variable in your shell, very much like how you can tweak the familiar POSIX command <tt>ls</tt> with $LSCOLORS: http://linux-sxs.org/housekeeping/lscolors.html"
- !ruby/struct:SM::Flow::P 
  body: "The colours that you can change are:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>undefined</tt>:"
    body: defaults to <tt>yellow</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>pending</tt>:"
    body: defaults to <tt>yellow</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>pending_arg</tt>:"
    body: defaults to <tt>yellow,bold</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>executing</tt>:"
    body: defaults to <tt>grey</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>executing_arg</tt>:"
    body: defaults to <tt>grey,bold</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>failed</tt>:"
    body: defaults to <tt>red</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>failed_arg</tt>:"
    body: defaults to <tt>red,bold</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>passed</tt>:"
    body: defaults to <tt>green</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>passed_arg</tt>:"
    body: defaults to <tt>green,bold</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>outline</tt>:"
    body: defaults to <tt>cyan</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>outline_arg</tt>:"
    body: defaults to <tt>cyan,bold</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>skipped</tt>:"
    body: defaults to <tt>cyan</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>skipped_arg</tt>:"
    body: defaults to <tt>cyan,bold</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>comment</tt>:"
    body: defaults to <tt>grey</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>tag</tt>:"
    body: defaults to <tt>cyan</tt>
  type: :NOTE
- !ruby/struct:SM::Flow::P 
  body: "For instance, if your shell has a black background and a green font (like the &quot;Homebrew&quot; settings for OS X' Terminal.app), you may want to override passed steps to be white instead of green. Examples:"
- !ruby/struct:SM::Flow::VERB 
  body: "  export GHERKIN_COLORS=&quot;passed=white&quot;\n  export GHERKIN_COLORS=&quot;passed=white,bold:passed_arg=white,bold,underline&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: "(If you're on Windows, use SET instead of export). To see what colours and effects are available, just run this in your shell:"
- !ruby/struct:SM::Flow::VERB 
  body: "  ruby -e &quot;require 'rubygems'; require 'term/ansicolor'; puts Term::ANSIColor.attributes&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: Although not listed, you can also use <tt>grey</tt>
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: COLORS
  value: "{         'black'   => \"\\e[30m\",         'red'     => \"\\e[31m\",         'green'   => \"\\e[32m\",         'yellow'  => \"\\e[33m\",         'blue'    => \"\\e[34m\",         'magenta' => \"\\e[35m\",         'cyan'    => \"\\e[36m\",         'white'   => \"\\e[37m\",         'grey'    => \"\\e[90m\",         'bold'    => \"\\e[1m\""
- !ruby/object:RI::Constant 
  comment: 
  name: ALIASES
  value: Hash.new do |h,k|         if k.to_s =~ /(.*)_arg/
full_name: Gherkin::Formatter::AnsiEscapes
includes: []

instance_methods: []

name: AnsiEscapes
superclass: 
